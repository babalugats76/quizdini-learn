@use "sass:map";

@mixin bg-color($color, $opacity: 1) {
  --bg-opacity: #{$opacity};
  background-color: $color;
  background-color: rgba(red($color), green($color), blue($color), var(--bg-opacity));
}

@mixin text-color($color, $opacity: 1) {
  --text-opacity: #{$opacity};
  color: $color;
  color: rgba(red($color), green($color), blue($color), var(--text-opacity));
}

@mixin border-color($color, $opacity: 1) {
  --border-opacity: #{$opacity};
  border-color: $color;
  border-color: rgba(red($color), green($color), blue($color), var(--border-opacity));
}

@mixin font-size($sz) {
  @each $key, $value in $sz {
    &--#{$key} {
      font-size: #{$value};
    }
  }
}

@mixin get-font-size($s, $sz) {
  font-size: #{map.get($s, $sz)};
}

@mixin font-face($font-name, $path, $weight: normal, $style: normal, $prefix: "~@/assets/fonts") {
  $filepath: "~@/assets/fonts" + "/" + $path;
  @font-face {
    font-family: quote($font-name);
    font-weight: $weight;
    font-style: $style;
    src: url($filepath + ".eot"); /* IE9 Compat Modes */
    src: url($filepath + ".eot?#iefix") format("embedded-opentype"),
      /* IE6-IE8 */ url($filepath + ".woff2") format("woff2"),
      /* Super Modern Browsers */ url($filepath + ".woff") format("woff"),
      /* Modern Browsers */ url($filepath + ".ttf") format("truetype"),
      /* Safari, Android, iOS */ url($filepath + ".svg##{$font-name}") format("svg"); /* Legacy iOS */
  }
}

@mixin webfont($f) {
  @each $font, $variants in $f {
    @each $variant, $values in $variants {
      @include font-face($font, map-get($values, "path"), map-get($values, "weight"));
    }
  }
}

@mixin font($f, $important: false) {
  @each $font, $variants in $f {
    @each $variant, $values in $variants {
      .#{#{to-lower-case($font)}#{if($variant==normal,'','-'+$variant)}} {
        font-family: quote($font) if($important, !important, null);
        font-weight: map-get($values, "weight") if($important, !important, null);
      }
    }
  }
}

@mixin get-font($family, $style: normal, $important: false) {
  font-family: quote($family) if($important, !important, null);
  font-weight: map-get($fonts, $family, $style, "weight") if($important, !important, null);
}